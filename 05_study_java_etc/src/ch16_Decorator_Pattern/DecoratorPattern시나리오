
	<< 데코레이터 패턴? >>
	
	1. 개념
		데코레이터 패턴은 기본 객체에
		추가적인 기능을 동적으로 유연하게 첨가하는 패턴이다.
	1.1. 장점
		객체에 동적으로 기능 추가가 간단하게 가능하다.
	1.2. 단점
		자잘한 데코레이터 클래스들이 계속 추가되어 클래스가 많아질 수 있다.
		겹겹이 애워싸고 있기 때문에 객체의 정체를 알기 힘들고 복잡해질 수 있다.
	1.3. 활용 상황
		객체가 상황에 따라 다양한 기능이 추가되거나 삭제되어야 할 때.
	2. 구조
		- Component
			ConcreteComponent 과 Decorator 가 구현할 인터페이스다.
			두 객체를 동등하게 다루기 위해 존재함
		- ConcreteComponent
			Decorate 를 받을 객체다.
			즉, 기능 추가를 받을 기본 객체
		- Decorator
			Decorate 를 할 객체의 추상 클래스다.
			즉, 기능 추가를 할 객체는 이 객체를 상속받는다.
		- ConcreteDecorator
			Decorator 를 상속받아 구현할 다양한 기능 객체이다.
			이 기능들은 ConcreteComponent 에 추가되기 위해 만들어 진다.
	
	----------------------------------------------------------------
	| <기타 관련 상식>
	|	자바의 입출력 스트림은 decorator pattern 임
	|	여러 decorator들을 활용하여 다양한 기능을 제공
	|	상속 보다 유연한 구현 방식
	|	데코레이터는 다른 데코레이터나 또는 컴포넌트를 포함해야 함
	|	지속적인 기능의 추가와 제거가 용이함
	|	decorator와 component는 동일한 것이 아님 ( 기반 스트림 클래스가 직접 읽고 쓸수 있음, 보조 스트림은 추가적인 기능 제공)
	----------------------------------------------------------------

	<< 커피를 만들어보아요~ >>
	Decorator Pattern을 활용하여 커피를 만들어 봅시다.
	
		- 아메리카노
		- 카페 라떼 = 아메리카노 + 우유
		- 모카 커피 = 아메리카노 + 우유 + 모카시럽
		- 크림 올라간 모카커피 = 아메리카노 + 우유 + 모카시럽 + whipping cream
		
		커피는 컴포넌트고, 우유, 모카시럽, whipping cream은 모두 데코레이터임
	----------------------------------------------------------------
	
	
	
	