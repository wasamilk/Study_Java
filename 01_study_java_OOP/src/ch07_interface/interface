
	<< 인터페이스는 왜 쓰냐? >>

	- 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
	- 일종의 클라이언트 코드와의 약속이며 클래스나 프로그램이 제공하는 명세(specification)
		클라이언트 프로그램은 인터페이스에 선언된 메서드 명세만 보고 이를 구현한 클래스를 사용할 수 있음
	- 어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메서드를 구현했다는 의미임
			: 모든 메서드를 구현하지 않은 경우 추상메서드를 포함하는 추상클래스가 되고, 추상 클래스는 인스턴스 생성이 불가함
	- 인터페이스를 구현한 다양한 객체를 사용함 => 다형성
	- ex> JDBC 인터페이스
			: 자바와 DB를 연결하려면, Connection인터페이스를 구현해야하는데, 이런 인터페이스를 미리 구현해서 제공하는것이 oracle.jar같은 라이브러리 파일이다..
			  개발자는 jar파일을 보지 않고, 명세서인 인터페이스만 보고 구현을 한다. 
	

		=================================================================================
		|	<< 인터페이스 구현 시 주의사항>>													|
		|																				|
		|	- 모든 메서드가 추상 메서드로 선언됨 public abstract									|
		|		: 명시적으로 적어주지 않아도 인터페이스면 자동으로 컴파일 시 입력됨							|
		|																				|
		|	- 모든 변수는 상수로 선언됨 public static final										|
		|		: 명시적으로 적어주지 않아도 인터페이스면 자동으로 컴파일 시 입력됨							|
		|																				|
		|	- 디폴트 메서드 (자바 8이후)														|
		|		: default 키워드 사용														|
		|		: 구현을 가지는 메서드, 인터페이스를 구현하는 클래스들에서 공통으로 사용할 수 있는 기본 메서드		|
		|		: 구현하는 클래스에서 오버라이딩 가능												|
		|		: 인터페이스를 구현한 클래스의 인스턴스가 생성 되어야 사용 가능함							|
		|																				|
		|	- 정적 메서드 (자바 8이후)														|
		|		: static 키워드 사용														|
		|		: 인스턴스 생성과 상관 없이 인터페이스 타입으로 사용할 수 있는 메서드						|
		|																				|
		|	- private 메서드 (자바 9이후)													|
		|		: default메서드나 static 메서드에서 사용함										|
		|		: 인터페이스를 구현한 클래스에서 사용하거나 재정의 할 수 없음								|
		|		: 인터페이스 내부에서만 사용하기 위해 구현하는 메서드									|
		=================================================================================
				
	